name: Dependency Vulnerability Scan

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'client/package.json'
      - 'client/package-lock.json'
      - 'server/package.json'
      - 'server/package-lock.json'
      - '.github/workflows/vulnerability-scan.yml'
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch newly disclosed vulnerabilities
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      fix_vulnerabilities:
        description: 'Automatically fix vulnerabilities'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write

jobs:
  vulnerability-scan:
    name: Scan Dependencies for Vulnerabilities
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run vulnerability scan
        id: audit_scan
        run: |
          npm run audit:check 2>&1 | tee audit-output.log
          # Continue even if vulnerabilities are found (non-blocking for now)
          exit 0

      - name: Generate vulnerability report
        if: always()
        run: npm run audit:report 2>&1

      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-report-node-${{ matrix.node-version }}
          path: |
            vulnerability-report.json
            vulnerability-report.log
            audit-output.log
          retention-days: 30

      - name: Check for critical vulnerabilities
        id: check_critical
        if: always()
        run: |
          if [ -f vulnerability-report.json ]; then
            CRITICAL=$(jq '.summary.critical // 0' vulnerability-report.json)
            if [ "$CRITICAL" -gt 0 ]; then
              echo "critical_found=true" >> $GITHUB_OUTPUT
              echo "critical_count=$CRITICAL" >> $GITHUB_OUTPUT
            else
              echo "critical_found=false" >> $GITHUB_OUTPUT
              echo "critical_count=0" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Comment PR with vulnerability report
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('vulnerability-report.json')) {
              const report = JSON.parse(fs.readFileSync('vulnerability-report.json', 'utf8'));
              const summary = report.summary;
              
              const comment = `
## 🔒 Dependency Vulnerability Scan Report

### Summary
- **Total Vulnerabilities**: ${summary.totalVulnerabilities}
- **Critical**: 🔴 ${summary.critical}
- **High**: 🟡 ${summary.high}
- **Moderate**: 🟠 ${summary.moderate}
- **Low**: 🟢 ${summary.low}
- **Affected Packages**: ${summary.totalAffectedPackages}

### Status
${summary.critical > 0 ? '⚠️ **CRITICAL vulnerabilities detected** - Please address before merging!' : summary.high > 0 ? '⚠️ **High-severity vulnerabilities found** - Consider fixing.' : summary.totalVulnerabilities > 0 ? '✅ Only low/moderate vulnerabilities - Monitor for updates.' : '✅ **No vulnerabilities detected!**'}

### Details by Workspace
${Object.entries(report.workspaces).map(([ws, data]) => {
  if (data.status === 'no_data') {
    return \`- **\${ws}**: No data available\`;
  }
  return \`- **\${ws}**: \${data.vulnerabilities} vulnerabilities (Critical: \${data.critical}, High: \${data.high}, Moderate: \${data.moderate}, Low: \${data.low})\`;
}).join('\n')}

### Recommendations
- Run \`npm run audit:check\` locally to see detailed information
- Run \`npm run audit:fix\` to attempt automatic fixes
- See [SECURITY.md](./SECURITY.md) for detailed guidelines
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Fail workflow if critical vulnerabilities found
        if: steps.check_critical.outputs.critical_found == 'true'
        run: |
          echo "❌ Critical vulnerabilities detected: ${{ steps.check_critical.outputs.critical_count }}"
          echo "Please run 'npm run audit:fix' and address the issues before deploying."
          exit 1

      - name: Auto-fix vulnerabilities (optional)
        if: github.event.inputs.fix_vulnerabilities == 'true' && github.event_name == 'workflow_dispatch'
        run: npm run audit:fix

      - name: Create PR for auto-fixed vulnerabilities
        if: github.event.inputs.fix_vulnerabilities == 'true' && github.event_name == 'workflow_dispatch'
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: 'chore: auto-fix dependency vulnerabilities'
          title: 'chore: auto-fix dependency vulnerabilities'
          body: 'This PR contains automatic fixes for dependency vulnerabilities detected by the security scan.'
          branch: 'fix/auto-fix-vulnerabilities'
          labels: 'security,automated'

      - name: Summary
        if: always()
        run: |
          echo "## Vulnerability Scan Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f vulnerability-report.json ]; then
            cat vulnerability-report.json | jq '.summary' >> $GITHUB_STEP_SUMMARY
          fi
